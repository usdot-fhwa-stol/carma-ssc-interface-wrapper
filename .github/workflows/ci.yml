name: CI
on:
  push:
jobs:
  build:
    defaults:
      run:
        working-directory: "/opt/carma/"
    runs-on: ubuntu-latest-8-cores
    container:
      image: usdotfhwastoldev/autoware.ai:develop
      env:
        AUTOWARE_ENV: /opt/autoware.ai/ros/install_ros2/setup.bash
        CATKIN_ENV: /home/carma/catkin/setup.bash
        INIT_ENV: /home/carma/.base-image/init-env.sh
        ROS_1_ENV: /opt/ros/noetic/setup.bash
        ROS_2_ENV: /opt/ros/foxy/setup.bash
        TERM: xterm
      options: "--user root"
    steps:
    - uses: actions/checkout@v3.3.0
      with:
        path: CARMASscInterfaceWrapper
    - name: Move working-directory
      run: |
        mkdir -p /opt/carma/src/
        mv $GITHUB_WORKSPACE/CARMASscInterfaceWrapper /opt/carma/src/CARMASscInterfaceWrapper
    - name: Pull ROS 1 Deps
      shell: bash
      run: |
        source ${INIT_ENV}
        ./src/CARMASscInterfaceWrapper/docker/checkout.bash --ros1_build -r ${PWD}
        ./src/CARMASscInterfaceWrapper/docker/install.sh ${{ secrets.ACCESS_ID }} ${{ secrets.SECRET_KEY }} --ros1_build
    - name: Backup make_with_coverage.bash
      shell: bash
      run: |
        cp /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash.backup
    - name: Build ROS 1 Driver
      shell: bash
      run: |
        source ${INIT_ENV}
        source ${ROS_1_ENV}
        sed -i '/colcon build/ s/$/ --packages-up-to ssc_interface_wrapper/' /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash
        make_with_coverage.bash -m -e /opt/carma/ -o ./coverage_reports/gcov
    - name: Run C++ Tests
      shell: bash
      run: |
        source ${INIT_ENV}
        source ${ROS_1_ENV}
        sed -i '/colcon test/ s/$/ --packages-up-to ssc_interface_wrapper/' /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash
        make_with_coverage.bash -t -e /opt/carma/ -o ./coverage_reports/gcov
    - name: Backup ROS1 compile_commands.json
      run: |
        mv /opt/carma/build/compile_commands.json /opt/carma/compile_commands.ros1.json
    - name: Cleanup before ROS 2 build
      run: |
        rm -rf /opt/carma/{build,install}
    - name: Pull ROS 2 Deps
      shell: bash
      run: |
        source ${INIT_ENV}
        ./src/CARMASscInterfaceWrapper/docker/checkout.bash --ros2_build -r ${PWD}
        ./src/CARMASscInterfaceWrapper/docker/install.sh ${{ secrets.ACCESS_ID }} ${{ secrets.SECRET_KEY }} --ros2_build
    - name: Restore make_with_coverage.bash
      run: |
        cp /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash.backup /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash
    - name: Build ROS 2 Driver
      shell: bash
      run: |
        find /opt/carma -name local_setup.bash -delete
        source ${INIT_ENV}
        source ${AUTOWARE_ENV}
        sed -i '/colcon build/ s/$/ --event-handlers console_direct+ --packages-up-to ssc_interface_wrapper_ros2 pacmod3 kvaser_interface/' /home/carma/.ci-image/engineering_tools/code_coverage/make_with_coverage.bash
        make_with_coverage.bash -m -e /opt/carma/ -o ./coverage_reports/gcov
    - name: Combine ROS1 and ROS2 compile_commands.json files
      run: |
        mv /opt/carma/build/compile_commands.json /opt/carma/compile_commands.ros2.json
        jq -s add /opt/carma/compile_commands.ros1.json /opt/carma/compile_commands.ros2.json > /opt/carma/build/compile_commands.json
    - name: Run Sonar Scanner (PRs)
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        source ${INIT_ENV}
        cd src/CARMASscInterfaceWrapper
        sonar-scanner -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }} -Dsonar.pullrequest.branch=${{ github.ref }} -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
    - name: Run Sonar Scanner (non-PR)
      if: github.event_name != 'pull_request'
      shell: bash
      run: |
        source ${INIT_ENV}
        cd src/CARMASscInterfaceWrapper
        sonar-scanner -Dproject.settings=.sonarqube/sonar-scanner.properties -Dsonar.login=${{ secrets.SONAR_TOKEN }}
